plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    //id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    
    reobf = true
    copyIdeResources = true
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

sourceSets {
    main {
        java {
            exclude "com/leonimust/spoticraft/neoforge/**"
        }

        resources {
            exclude "META-INF/neoforge.mods.toml"
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    minecraftLibrary 'org.nanohttpd:nanohttpd:2.3.1'
    minecraftLibrary 'org.json:json:20231013'
    minecraftLibrary 'se.michaelthelin.spotify:spotify-web-api-java:9.1.0'

    jarJar('org.apache.httpcomponents.core5:httpcore5:5.3.1') {
        jarJar.ranged(it, "[5.3,5.4)")
    }

    jarJar('org.json:json:20231013') {
        jarJar.ranged(it, "[20231013,20231015)")
    }

    jarJar('org.nanohttpd:nanohttpd:2.3.1') {
        jarJar.ranged(it, "[2.3,2.4)")
    }

    jarJar('se.michaelthelin.spotify:spotify-web-api-java:9.1.0') {
        jarJar.ranged(it, '[9.1,9.2)')
    }

    // I need copium
    //implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.1'
    jarJar('org.apache.httpcomponents.client5:httpclient5:5.4.1') {
        jarJar.ranged(it, "[5.4,5.5)")
    }

    //implementation 'org.apache.httpcomponents.client5:httpclient5-cache:5.4.1'
    jarJar('org.apache.httpcomponents.client5:httpclient5-cache:5.4.1') {
        jarJar.ranged(it, "[5.4,5.5)")
    }

    jarJar('org.apache.httpcomponents.core5:httpcore5-h2:5.3.1') {
        jarJar.ranged(it, "[5.3,5.4)")
    }

    jarJar('com.neovisionaries:nv-i18n:1.28') {
        jarJar.ranged(it, "[1.28,1.29)")
    }
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    archiveClassifier = 'slim'
    manifest {
        attributes([
            'Specification-Title'     : mod_id,
            'Specification-Vendor'    : mod_authors,
            'Specification-Version'   : '1', // We are version 1 of ourselves
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : project.jar.archiveVersion,
            'Implementation-Vendor'   : mod_authors
        ])
    }
}

jarJar.enable()

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('jarJarForAll') {
    group = 'jarJar'
    description = 'Builds jarJar for Forge'

    doLast {
        //really can't find a way to not use exec
        exec {
            commandLine './gradlew', 'jarJar'
        }
    }
}

eclipse {
    synchronizationTasks 'genEclipseRuns'
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
