import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id 'net.darkhax.curseforgegradle' version '1.1.26'
}

version = project.mod_version

base {
	archivesName = project.mod_id
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	include(modImplementation('org.nanohttpd:nanohttpd:2.3.1'))
	include(modImplementation('org.json:json:20231013'))
	include(modImplementation('se.michaelthelin.spotify:spotify-web-api-java:9.1.0'))

	include('org.apache.httpcomponents.core5:httpcore5:5.3.1')
	include('org.apache.httpcomponents.client5:httpclient5:5.4.1')
	include('org.apache.httpcomponents.client5:httpclient5-cache:5.4.1')
	include('org.apache.httpcomponents.core5:httpcore5-h2:5.3.1')
	include('com.neovisionaries:nv-i18n:1.28')

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

}

remapJar {
	addNestedDependencies = true // Keep Fabric API dependencies
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.register('publishAll') {
	group = 'publishing'
	description = 'Publish to Modrinth and CurseForge'

	doLast {
		//really can't find a way to not use exec
		exec {
			commandLine './gradlew', 'uploadToModrinth'
		}

		exec {
			commandLine './gradlew', 'uploadToCurseForge'
		}
	}
}

tasks.register('uploadToModrinth', Exec) {
	group = 'publishing'
	description = 'Uploads the jar to Modrinth using the API'

	// Ensure the build task has already run
	dependsOn 'build'

	def pattern = /(\d+\.\d+\.\d+)-(\d+\.\d+\.\d+)-(\w+)(?:-(\w+))?/
	def matcher = version =~ pattern

	if (!matcher.find()) {
		println("nope")
		return
	}

	def mcVersion = matcher.group(1)  // e.g. "1.21.4"
	def modVersion = matcher.group(2) // e.g. "0.0.1"
	def releaseType = matcher.group(3) // e.g. "release"
	def extra = matcher.group(4) ?: "" // If group(4) is null, use an empty string

	def formattedVersion = "[${mcVersion}] SpotiCraft ${modVersion} ${releaseType.capitalize()} ${extra ? extra.capitalize() : ''}".trim()

	// JSON metadata â€“ adjust the values as needed
	def jsonData = """{
      "name": "${formattedVersion}",
      "version_number": "${version}",
      "version_type": "${releaseType}",
      "game_versions": ["${minecraft_version}"],
      "loaders": ["${extra == "" ? "forge" : extra}"],
      "dependencies": [
      	{
      		"dependency_type" : "required",
      		"project_id" : "P7dR8mSH"
      	}
	  ],
      "featured": true,
      "status": "listed",
      "project_id": "${modrinthProjectId}",
      "file_parts": ["file"],
      "primary_file": "file"
    }"""

	// Use curl to POST a multipart/form-data request to Modrinth API
	commandLine "curl",
			"-X", "POST",
			"https://api.modrinth.com/v2/version",
			"-H", "Authorization: ${System.getenv('MODRINTH_TOKEN')}",
			"-F", "data=${jsonData};type=application/json",
			"-F", "file=@${file("${buildDir}/libs/spoticraft-${mod_version}.jar")}"
}

tasks.register('uploadToCurseForge', TaskPublishCurseForge) {
	group = 'publishing'

	def pattern = /(\d+\.\d+\.\d+)-(\d+\.\d+\.\d+)-(\w+)(?:-(\w+))?/
	def matcher = version =~ pattern

	if (!matcher.find()) {
		println("nope")
		return
	}

	def mcVersion = matcher.group(1)  // e.g. "1.21.4"
	def modVersion = matcher.group(2) // e.g. "0.0.1"
	def releaseType = matcher.group(3) // e.g. "release"
	def extra = matcher.group(4) ?: "" // If group(4) is null, use an empty string

	def formattedVersion = "[${mcVersion}] SpotiCraft ${modVersion} ${releaseType.capitalize()} ${extra ? extra.capitalize() : ''}".trim()

	apiToken = System.getenv("CURSEFORGE_TOKEN")

	def mainFile = upload(curseforgeProjectId, file("${buildDir}/libs/spoticraft-${mod_version}.jar"))

	mainFile.releaseType = releaseType
	mainFile.changelog = ''
	mainFile.addGameVersion(mcVersion)
	mainFile.addModLoader(extra == "" ? "forge" : extra)
	mainFile.displayName = formattedVersion
	mainFile.addRequirement("fabric-api")
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}